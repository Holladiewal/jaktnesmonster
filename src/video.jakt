import extern c "SDL.h" {}
import extern "algorithm" {}
import sdl { SDL,  null }
import ppu { RGB }
import cart { Region }

function draw_frame(sdl: SDL, mut buffer: [u32], region: Region) throws {

    mut format = 0u32
    mut access: c_int = 0
    let (start_y, scanlines) = match region {
        NTSC => (8, 224) // NTSC does not display the top and bottom 8 scanlines of the framebuffer
        PAL => (0, 240)
        else => {abort()}
    }
    unsafe {
        cpp {
            "format = SDL_PIXELFORMAT_RGBA32;"
            "access = SDL_TEXTUREACCESS_STREAMING;"
        }
    }

    mut surface = sdl.surface

    unsafe {cpp{
        "
        SDL_Surface* source = SDL_CreateRGBSurfaceFrom(buffer.unsafe_data()+(256*start_y), 256, scanlines, 32, 256*4, 0x000000ff, 0x0000ff00, 0x00ff0000, 0);
        SDL_BlitScaled(source, nullptr, surface, nullptr);
        "
    }}

    sdl.update_window_surface()

}

