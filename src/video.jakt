import extern c "SDL.h" {}
import extern "algorithm" {}
import sdl { SDL,  null }
import ppu { RGB }
import cart { Region }

function draw_frame(sdl: SDL, buffer: [RGB], region: Region) throws {

    mut format = 0u32
    mut access: c_int = 0
    let (width, height) = match region {
        NTSC => (256, 224) // NTSC does not display the top and bottom 8 scanlines of the framebuffer
        PAL => (256, 240)
        else => {abort()}
    }
    unsafe {
        cpp {
            "format = SDL_PIXELFORMAT_RGBA32;"
            "access = SDL_TEXTUREACCESS_STREAMING;"
        }
    }

    mut texture = sdl.create_texture(format, access, w: 256, h: 240)
    mut pixels: raw u32 = null()
    mut pitch: c_int = 0

    unsafe {cpp{
        "int result = SDL_LockTexture(texture, NULL, (void**)&pixels,  &pitch);
        if (result < 0)  {
            printf(\"SDL LockTexture failed: %s\n\",  SDL_GetError());
        }
        for (int i = 0; i < buffer.size(); ++i){
            pixels[i] = buffer[i]->to_u32();
        }
        "
    }}

    sdl.unlock_texture(texture)
    sdl.render_copy(texture, srcrect: null(), dstrect: null())    

    sdl.render_present()

}

