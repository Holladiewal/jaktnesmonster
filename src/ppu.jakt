class PPU {
    base_table_address: u16
    vram_address_increment: u16
    sprite_table_address: u16
    background_table_address: u16
    sprite_size_8x8: bool
    public nmi_on_vblank: bool
    clock: u64
    public in_vblank: bool

    public function init() throws -> PPU {
        return PPU(
            base_table_address: 0x2000
            vram_address_increment: 1
            sprite_table_address: 0x0000
            background_table_address: 0x0000
            sprite_size_8x8: true
            nmi_on_vblank: false
            clock: 0
            in_vblank: false
        )
    }

    public function tick(mut this, cycles: u64) {
        .clock += cycles

        let clock_in_current_frame = .clock % (341u64 * 262u64)
        if clock_in_current_frame > (341u64 * 241u64) and not .in_vblank {
            println("Setting vblank to true")
            .in_vblank = true
        } else if clock_in_current_frame <= (341u64 * 241u64) and .in_vblank {
            .in_vblank = false
        }
    }

    function ppu_ctrl(mut this, address: u16, value: u8) {
        match value & 0x3 {
            0 => {
                .base_table_address = 0x2000
            }
            1 => {
                .base_table_address = 0x2400
            }
            2 => {
                .base_table_address = 0x2800
            }
            3 => {
                .base_table_address = 0x2c00
            }
            else => {}
        }
        if (value & 0x4) == 0x4 {
            .vram_address_increment = 32
        } else {
            .vram_address_increment = 1
        }
        if (value & 0x8) == 0x8 {
            .sprite_table_address = 0x1000
        } else {
            .sprite_table_address = 0x0000
        }
        if (value & 0x10) == 0x10 {
            .background_table_address = 0x1000
        } else {
            .background_table_address = 0x0000
        }
        if (value & 0x20) == 0x20 {
            .sprite_size_8x8 = false
        } else {
            .sprite_size_8x8 = true
        }
        if (value & 0x80) == 0x80 {
            .nmi_on_vblank = true
        } else {
            .nmi_on_vblank = false
        }

        println("base_table_address: {:0>4x}", .base_table_address)
        println("vram_address_increment: {}", .vram_address_increment)
        println("sprite_table_address: {:0>4x}", .sprite_table_address)
        println("background_table_address: {:0>4x}", .background_table_address)
        println("sprite size 8x8: {}", .sprite_size_8x8)
        println("nmi_on_vblank: {}", .nmi_on_vblank)
    }

    function ppu_mask(mut this, address: u16, value: u8) {

    }

    function ppu_status(mut this) -> u8 {
        mut status = 0
        if .in_vblank {
            println("Reading vblank status")
            status |= 0x80
        }

        .in_vblank = false
        return status
    }

    public function write_ppu_addr(mut this, address: u16, value: u8) {
        match address {
            0x2000 => .ppu_ctrl(address, value)
            0x2001 => .ppu_mask(address, value)
            else => {}
        }
    }

    public function read_ppu_addr(mut this, address: u16) -> u8 {
        return match address {
            0x2002 => .ppu_status()
            else => 0
        }
    }
}